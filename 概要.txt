目的
	車輛の履歴管理
	・任意の車輛の履歴を取り出せること
	・特定の条件に該当する車輛を取り出せること
	・改造、転属等の追加情報を任意に追加可能なこと

車輛テーブル
	シリアル番号:系列コード：形式：車号：概要
	
	系列コード	EC：電車
				DC：気動車
				PC：客車
				FV：貨車
				EL：電気機関車
				DL：ディーゼル機関車
				SL：蒸気機関車
				
				
イベントテーブル
	シリアル番号：イベントコード：年月日：施工箇所：概要
	
	イベントコード：
				新製
				廃車
				転属
				改番
				改造廃車
				改造新製
				改造（改造内容毎に採番）
				塗色変更
				
sqlite3 参考ページ
http://www.dbonline.jp/sqlite/

データベース構造
データベース                xxxxx.db
　|-----テーブル1
  |  |-----カラム1（データ型指定可）
  |  |-----カラム2（データ型指定可）
  |  |-----カラム3（データ型指定可）
  |  |-----・・・・・
　|
　|-----テーブル2
  |  |-----カラム1（データ型指定可）
  |  |-----カラム2（データ型指定可）
  |  |-----カラム3（データ型指定可）
  |  |-----・・・・・


  カラムにPRIMARY KEYを設定すると、当該カラムが主キーとなる。

  PRIMARY KEY

車輛テーブル		（CarriageTable）
	カラム1	種別コード		(Classification）
	カラム2	形式番号		(Series)	
	カラム3	形式			(Form)
	カラム4	車号			(Serial)
	カラム4	概要			(Summary)
	車輛管理番号			(CarriageNumber)	PRIMARY KEY(種別コード,形式番号,形式,車号)
	ROWID
	
履歴テーブル		（HistoryTable）
	カラム1	車輛テーブルID	(CarriageNumber)	= 車輛テーブルのROW ID
	カラム2	履歴コード		(Code)
	カラム3	履歴年			(Year)
	カラム4	履歴月			(Month)
	カラム5	履歴日			(Date)
	カラム6	所属区			(Place)
	カラム6	施工箇所		(Factory)			転属時は不要
	カラム7	概要			(Summary)

車輛テーブル
create table CarriageTable(Classification,Series,Form,Serial,Summary,PRIMARY KEY(Classification,Series,Form,Serial));
PRIMARY KEY()を定義することで同一車号の二重登録を防止可能

車輛テーブル登録例
INSERT INTO CarriageTable values('EC',101,'クモハ100',1,'');


履歴テーブル
CREATE TABLE HistoryTable(CarriageNumber,Code,Year,Month,Day,Place,Factory,Summary);

車輛テーブル登録例
INSERT INTO HistoryTable values(1,'改番',1959,06,01,'三鷹','三鷹','改造版車号モハ90512');
INSERT INTO HistoryTable values(1,'改番',1959,06,01,'三鷹','三鷹','改造版車号モハ90512');

テーブルのダンプ
select * from CarriageTable

テーブルの削除
drop table CarriageTable
